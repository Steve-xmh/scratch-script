
const path = require('path')
const fs = require('fs')
const fsp = fs.promises

const ScratchScript = require('../dist/node/ssc').default
const BlockStorage = ScratchScript.BlockStorage.createWithCoreBlocks()
const InputType = ScratchScript.InputType
const IntToType = {}

for (const i in InputType) {
    IntToType[InputType[i]] = i
}

async function main () {
    const f = await fsp.open(path.resolve(__dirname, '../API.md'), 'w')
    await f.write('# ScratchScript Core Block API Reference\n')
    await f.write('Generated by [scripts/gendoc.js](scripts/gendoc.js)  \n')
    await f.write(`Package Version: ${require('../package.json').version}  \n`)
    await f.write(`Generate Date: ${new Date().toLocaleString('en-us')}  \n`)
    const index = Object.keys(BlockStorage._coreBlocks)
    let i = 0
    await f.write('## Index\n')
    for (const cate of index) {
        const blocks = BlockStorage._coreBlocks[cate]
        await f.write(`${++i}. [${blocks.name || blocks.id}](#${blocks.name || blocks.id})\n`)
    }
    for (const cate of index) {
        const blocks = BlockStorage._coreBlocks[cate]
        await f.write(`## ${blocks.name || blocks.id}\n`)
        if ('doc' in blocks) await f.write(`${blocks.doc}  \n`)
        await f.write('[Return To Index](#Index)  \n')
        await f.write(`ID: \`${blocks.id}\` \n`)
        if ('blocks' in blocks) {
            for (const block of blocks.blocks) {
                await f.write(`### \`${block.name}(`)
                const args = ('args' in block) ? block.args.filter(v => v.type !== 30 && v.type !== 31) : []
                if (args.length > 0) {
                    await f.write(args.map(arg => {
                        return arg.name + ': ' + IntToType[arg.type]
                    }).join(', '))
                }
                await f.write(`)${'subn' in block ? ` { ${block.subn} }` : ''}`)
                if (block.type === 1) {
                    await f.write(': void')
                } else {
                    await f.write(': any')
                }
                await f.write('`\n')
                if ('doc' in block) await f.write(`${block.doc}  \n`)
                else await f.write(`Reference to \`${block.opcode}\`.  \n`)
            }
        }
    }
    await f.close()
}

main()
